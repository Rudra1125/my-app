{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","newtext","split","join","splitText","i","length","charAt","defaultProps","aboutText","Alert","alert","word","lower","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d141e23f.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                {/* <a className=\"nav-a active\" aria-current=\"page\" href=\"#\">Home</a> */}\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <a className=\"nav-a\" href\"/about\">{props.aboutText}</a>\r\n              </li> */}\r\n              \r\n             \r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes= {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string\r\n};\r\n\r\nNavbar.defaultProps ={\r\n    title: \"set title here\",\r\n    aboutText:\"About\"\r\n}","import React,{useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick=() =>{\r\n        // console.log(\"upper case was clicked\"+text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n\r\n        props.showAlert(\"converted to Upper Case\",\"success\");\r\n    }\r\n\r\n    const handleOnChange=(event) => {\r\n        // console.log(\"On change\");\r\n        setText(event.target.value);\r\n        \r\n    }\r\n    const handleDownClick=()=>{\r\n        let newText=text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"converted to lower Case\",\"success\");\r\n    }\r\n    \r\n    const handleClearClick =() =>{\r\n        setText('');\r\n        props.showAlert(\"text cleared!\",\"success\");\r\n    }\r\n    const handleCopy =() =>{\r\n        // let new \r\n        let text=document.getElementById('myBox');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"text Copied\",\"success\");\r\n    }\r\n    const handleExtraSpaces = () => {\r\n        let newtext= text.split(/[ ]+/);\r\n        setText(newtext.join(\" \"));\r\n        props.showAlert(\"Extra Space handled!\",\"success\");\r\n    }\r\n    const handleCaptalize = () =>{\r\n        var splitText= text.toLowerCase().split(\" \");\r\n        for(var i=0;i<splitText.length;i++){\r\n            splitText[i].charAt(0).toUpperCase();\r\n        }\r\n        let newText=splitText.join(\" \");\r\n        setText(newText);\r\n        props.showAlert(\"text capitalize\",\"success\");\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n    //text=\"new Text\"//wrong way\r\n    // setText(\"new text\");//correct way\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" id=\"myBox\" value ={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'#042743'}} rows=\"10\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-1\"onClick={handleUpClick}>Covert To Upper Case</button>\r\n                <button className=\"btn btn-primary mx-1\"onClick={handleDownClick}>Covert To Lower Case</button>\r\n                <button className=\"btn btn-primary mx-1\"onClick={handleClearClick}>Clear Text</button>\r\n                <button className=\"btn btn-primary mx-1\"onClick={handleCopy}>Copy Text</button>\r\n                <button className=\"btn btn-primary mx-1\"onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n                <button className=\"btn btn-primary mx-1\"onClick={handleCaptalize}>Captalize</button>\r\n\r\n            </div>\r\n            <div className=\"container my-3\"style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n                <h2>Your text Summary</h2>\r\n                <p>{text.split(\" \").length} words, {text.length} characters</p>\r\n                <p>{0.008*text.split(\" \").length} Minutes to read the text</p>\r\n                <h1>Preview</h1>\r\n                <p>{text.length>0?text:\"Enter something in the textbox above to preview it here\"}</p>\r\n            </div>\r\n        </> \r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize= (word) =>{\r\n        const lower= word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n    return (\r\n        \r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n            \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Alert\r\n","// import logo from './logo.svg';\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import About from './components/About';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n  \n// } from \"react-router-dom\";\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); //whether dark mode is enable or no t\n  const [alert, setAlert] = useState(null);\n\n  const showAlert =(message,type) =>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(()=>{\n      setAlert(null);\n    },1000);\n  }\n  const toggleMode = () =>{\n    if(mode==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor='#042743';\n      document.title='TextUtils - Dark Mode';\n      showAlert(\"Dark mode has been enabled\",\"success\")\n    }else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light mode has been enabled\",\"success\");\n      document.title='TextUtils - Light Mode';\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n        <Alert alert={alert}/>\n        <div className=\"container my-3\" >\n          {/* {/users--> component 1} */}\n          {/* /users/home --->-->component 2 */}\n          {/* React uses partial matching so we have to use exact keyword to match exactly */}\n          {/* <Routes>\n            <Route exact path=\"/about\" element={<About />}>\n            </Route> */}\n            <TextForm heading=\"Enter text to analyze\"  mode={mode} showAlert={showAlert}/> \n            {/* <Route exact path=\"/\" element={}> */}\n            {/* </Route> */}\n          {/* </Routes> */}\n        </div>\n      {/* </Router>   */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","aboutText","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","newtext","split","join","splitText","i","charAt","filter","element","defaultProps","Alert","height","alert","word","lower","slice","capitalize","msg","About","myStyle","App","setMode","setAlert","message","setTimeout","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5cf26059.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link \" aria-current=\"page\" to=\"/\">Home</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n              </li>\r\n              \r\n             \r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes= {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string\r\n};\r\n\r\nNavbar.defaultProps ={\r\n    title: \"set title here\",\r\n    aboutText:\"About\"\r\n}","import React,{useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick=() =>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n\r\n        props.showAlert(\"converted to Upper Case\",\"success\");\r\n    }\r\n\r\n    const handleOnChange=(event) => {\r\n        \r\n        setText(event.target.value);\r\n        \r\n    }\r\n    const handleDownClick=()=>{\r\n        let newText=text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"converted to lower Case\",\"success\");\r\n    }\r\n    \r\n    const handleClearClick =() =>{\r\n        setText('');\r\n        props.showAlert(\"text cleared!\",\"success\");\r\n    }\r\n    const handleCopy =() =>{\r\n        // let new \r\n        // let text=document.getElementById('myBox');\r\n        // text.select();\r\n        // navigator.clipboard.writeText(text.value);\r\n        navigator.clipboard.writeText(text);\r\n        // document.getSelection().removeAllRanges();\r\n        props.showAlert(\"text Copied\",\"success\");\r\n    }\r\n    const handleExtraSpaces = () => {\r\n        let newtext= text.split(/[ ]+/);\r\n        setText(newtext.join(\" \"));\r\n        props.showAlert(\"Extra Space handled!\",\"success\");\r\n    }\r\n    const handleCaptalize = () =>{\r\n        var splitText= text.toLowerCase().split(\" \");\r\n        for(var i=0;i<splitText.length;i++){\r\n            splitText[i].charAt(0).toUpperCase();\r\n        }\r\n        let newText=splitText.join(\" \");\r\n        setText(newText);\r\n        props.showAlert(\"text capitalize\",\"success\");\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n    //text=\"new Text\"//wrong way\r\n    // setText(\"new text\");//correct way\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" id=\"myBox\" value ={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='dark'?'dimgrey':'white',color:props.mode==='dark'?'white':'#042743'}} rows=\"10\"></textarea>\r\n                </div>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\"onClick={handleUpClick}>Covert To Upper Case</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\"onClick={handleDownClick}>Covert To Lower Case</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\"onClick={handleClearClick}>Clear Text</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\"onClick={handleCopy}>Copy Text</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\"onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\"onClick={handleCaptalize}>Captalize</button>\r\n\r\n            </div>\r\n            <div className=\"container my-3\"style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n                <h2>Your text Summary</h2>\r\n                <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words, {text.length} characters</p>\r\n                <p>{0.008*text.split(\" \").filter((element)=>{return element.length!==0}).length} Minutes to read the text</p>\r\n                <h1>Preview</h1>\r\n                <p>{text.length>0?text:\"Nothing to preview!\"}</p>\r\n            </div>\r\n        </> \r\n    )\r\n}\r\n// !IMPORTANT\r\n//here use filter to neglect the empty strings...\r\n// it takes a function which returns true or false... \r\n//  if it returns true then the filter will take it otherwise it will neglect it...","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize= (word) =>{\r\n        const lower= word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n    return (\r\n        <div style={{height: '50px'}}>\r\n                {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n            </div> }   \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\n\r\nexport default function About(props) {\r\n    \r\n    // const [myStyle, setmyStyle] = useState({\r\n    //     backgroundColor: 'white',\r\n    //     color: 'black'\r\n    // })\r\n    let myStyle= {\r\n        color: props.mode==='dark' ?'white':'#042743',\r\n        backgroundColor: props.mode==='dark'?'rgb(36 74 104)':'white'\r\n        \r\n    }\r\n    \r\n    return (\r\n        <div className=\"container\" style={{color: props.mode==='dark' ?'white':'#042743'}}>\r\n            <h1 className=\"my-3\">About Us </h1>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\" style={myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                           <strong>Analyze Your Text</strong> \r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            TextUtils gives you a unique way to analyze ypur text quickly and efficiently. Be it word count, character count ,copy text to clipboard, cover to upper case ,convert to lower case ,remove some extra spaces.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                    <button className=\"accordion-button\"style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                           <strong>Free To Use</strong> \r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\"style={myStyle}>\r\n                            TextUtils is a free character counter tool that provides instant character count & word count statistics for a given text. TextUtils reports the number of words and charcters. Thus it is suitable for writing text with word/ character limit.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            <strong>Browser Compatible</strong>\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            This word counter software works in sany web browsers as Chrome, Firefox, Internet Explorer, Safari, Opera. It suits to count Characters in facebook, Blog, books , excel document, pdf document, essays, etc.  \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","// import logo from './logo.svg';\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nimport About from './components/About';\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  \n} from \"react-router-dom\";\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); //whether dark mode is enable or no t\n  const [alert, setAlert] = useState(null);\n\n  const showAlert =(message,type) =>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(()=>{\n      setAlert(null);\n    },1000);\n  }\n  const toggleMode = () =>{\n    if(mode==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor='#042743';\n      // document.title='TextUtils - Dark Mode';\n      showAlert(\"Dark mode has been enabled\",\"success\")\n    }else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light mode has been enabled\",\"success\");\n      // document.title='TextUtils - Light Mode';\n    }\n  }\n  return (\n    <>\n      {/* <Navbar/> */}\n      <Router>\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n        <Alert alert={alert}/>\n        <div className=\"container my-3\" >\n          {/* {/users--> component 1} */}\n          {/* /users/home --->-->component 2 */}\n          {/* React uses partial matching so we have to use exact keyword to match exactly */}\n          <Routes>\n            <Route exact path=\"/about\" element={<About mode={mode} />}>\n            </Route>\n            <Route exact path=\"/\" element={<TextForm heading=\"Enter text to analyze\"  mode={mode} showAlert={showAlert}/> }>\n            </Route>\n          </Routes>\n        </div>\n      </Router>  \n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}